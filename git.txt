ctrl + l git bash초기화

git의 동작원리
데이터를 가져오거나 프로젝트를 저장할 때마다 그 시점의 파일에 대해서 스냅샷을 저장
변경되지 않은 파일은 다시 파일을 저장하지 않고 이전에 지정한 동일한 파일을 링크


git 파일 확인 방법 : 체크섬

데이터를 저장하기 전에 체크섬을 구하고 이 체크섬을 통해 데이터를 관리

SHA-1해쉬 사용
40자리지만 앞 6자리로 파일 찾을 수 있다.

파일 이름이 아닌 컨텐츠의 해쉬값을 저장
파일명이 아닌 해쉬값이 변경되어야함.



동작원리

로컬			서버에 내꺼	서버
working Directory	StagingArea	Repository

이미 있는 프로젝트를 가져올시

Repository 의 프로젝트를 working Directory로 clone한다.

working Directory 에서 파일이 추가될 시

StagingArea 영역에 추가해야한다. (add명령어)

StagingArea영역엔 내 working Directory의 정보가 있다.

working Directory -> StagingArea로 저장할땐 add 명령어를 사용한다.
StagingArea	  -> Repository로 저장할땐 commit 명령어를 사용한다.


git의 branch란?


브랜치1 브랜치2 브랜치3 이렇게 생성해 작업하고 병합이 가능하다.

git에선 병렬적으로 많은 branch가 생성된다.
그 branch들이 merge가 되며 한 제품이 만들어진다.

gitflow(그냥 이름임.)

master <- 저장소를 생성하고 첫번째 commit하면 master가된다.

hotfix <- master branch에서 파생된 branch

Release <- 과연 필요할까? Develop에서 Release로 Release에서 master로 저장한다.

Develop <- 실제 개발을 하는 branch

Feature <- 신규 개발하는 branch Develop에서 파생된다.


git Bash = MINGW64 이름이 같다.


git에선 책임성을 유지하기 위해 커밋하는 사람의 이메일과 이름이 반드시 필요하다.

git의 전역성정정보

cd / <-git의 home

cd mingw64/etc/

cd ~ <- local home
ls -al |grep .gitconfig <-깃 컨피그 검색
cat .gitconfig 정보보기


정보 없을시 저장하기

git config --global user.name ???
git config --global user.email ???@??.com


git의 Workflow
레파지토리 관련
init -> git 초기화
status -> 현재상태조회
add ->StagingArea로 추가
commit ->Repository로 추가
log    ->파일변경이력 추적
diff   	-> 커밋을 비교
branch 	-> 현재상태조회
tag    	-> 특정시점 태그
checkout-> 브랜치 내려받기
merge	-> 병렬적으로 생성한 브랜치를 하나로 머지


명령어

git init
저장소만들기 ex
https://git-scm.com/book/ko/v1/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-Git-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0
현재 디렉토리를 git 저장소로 설정하는 명령
실행하면 .git이 생성된다.
master branch가 생긴다. bash창에 뜬다.
cd .git 로 들어가

git config uesr.name ??? 이름을 설정할 수 있다.

lgnore 저장소에서 무시할 파일 설정
os가 생성하는 파일들
이클립스등 settings 즉 설정파일등을 올릴 필요가 없다.

관리를 해야하는 파일은??
프로젝트와 관련된 모든 파일



ignore 하는방법
파일생성
vim .gitignore
입력모드 A ,I, O
저장 ctrl + c 후 :wq

git status를 해보면 ignore안에 있는 파일은 나오지 않는다.


git status 란?
현재 브랜치
원격 브랜치
추적,변경된 파일

변경,추가된 파일이 있을경우 git status를 하면 출력된다.

git add 파일명 으로 추가해준다.
add로 추가한 파일 제거하기
git rm --cached 파일명

모두제거 <- -r을 잊지말자
git rm -r --cached .
add를 하지않으면 commit내용에 포함되지 않는다. 당연하지



git add란?
working dir -> staging area 로 넘어갈때 상태를 보여준다.

add사용법
git add 파일명
git add . <- 모든파일 staging area로 추가한다.
git add -i < 여러 보기가 나온다. 
4번하면 파일 종류가 나옴
add할 파일 정하고 마지막 엔터 
q로 종료


git commit
https://git-scm.com/book/ko/v1/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%EC%88%98%EC%A0%95%ED%95%98%EA%B3%A0-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0
staging 영역 파일을 저장소에 저장한다.
git commit
디폴츠 커밋 에디터가 출력된다.
키보드 a키를 누르고 저장메시지 입력후 ctrl + c 누른후 :wq로 나오면 커밋된다.

git commit -m "커밋메시지"
커밋 에디터까지 들어가지 않고
add한 파일 즉 staging영역에 있는 파일 커밋

git commit -a -m "커밋메시지"
staging영역에 바뀐 파일까지 저장하기
-저장소에 있는 파일이 변경됫을시 커밋가능하다.

커밋메시지 작성방법
타이틀은 50글자 이내
내용	 한줄에 72자 이내
추가적인 문단은 '-' 을 이용해서 작성


git log
https://git-scm.com/book/ko/v1/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%EC%BB%A4%EB%B0%8B-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0

저장소에 있는 commit 이력을 조회한다.

git log --oneline
커밋 이력중 ID,메시비만 조회

git log --oneline --decorate --graph --all
모든 브랜치 커밋(Commit)이력조회

git log -- 특정파일
특정 파일의 변경 커밋 조회



git diff
다른 커밋과 Working 디렉토리를 비교하는 명령

git diff
현재 브랜치의 마지막 커밋과 차이점 비교

git diff [Commit ID]
특정 커밋과의 차이점 비교

git diff [Commit ID] -- [파일경로]
특정 커밋의 특정파일 비교


git branch
브랜치를 생성, 수정, 삭제하는 명령


git branch
브랜치 목록조회

git branch [브랜치명]
브런치생성

git branch -d [브랜치명]
브랜치 삭제

git branch -m [브랜치명]
브랜치 이름변경

Checkout
워킹 디렉토리의 소스를 특정 커밋으로 변경

git checkout [브랜치명]
특정 브랜치로 워킹 디렉토리 변경

git checkout -b [브랜치명]
특정 브랜치를 생성하고 그 브랜치로 워킹 디렉토리 변경

git checkout [커밋ID]
특정 커밋로 워킹 디렉토리변경


git checkout -- [파일경로]
특정파일을 해당 브랜치 또는 커밋 상태로 변경 


Merge
다른 두개의 소스를 병합하는 명령

git checkout master
원본 코드로 브랜치경로변경

git merger [브랜치명]
합칠 브랜치명을 입력한다.

충돌날경우 vim으로 접속 충돌부분 해결하고 add후 commit한다.